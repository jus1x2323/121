from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from config.settings import ADMIN_ID
from utils.keyboards import get_admin_menu
from database.models import DatabaseManager

router = Router(name="admin_basic")

# Filter for admin only
router.message.filter(F.from_user.id == ADMIN_ID)
router.callback_query.filter(F.from_user.id == ADMIN_ID)


@router.message(Command("admin"))
async def admin_command(message: Message):
    """Handle /admin command"""
    await message.answer(
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=get_admin_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery):
    """Handle admin menu callback"""
    await callback.message.edit_text(
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """Handle admin statistics callback"""
    db = DatabaseManager()
    
    try:
        with db.get_connection() as conn:
            cur = conn.cursor()
            
            # Get various statistics
            cur.execute("SELECT COUNT(*) FROM orders")
            total_orders = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM orders WHERE status = '–ó–∞–≤–µ—Ä—à—ë–Ω'")
            completed_orders = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM orders")
            unique_users = cur.fetchone()[0]
            
            cur.execute("SELECT SUM(price) FROM orders WHERE status = '–ó–∞–≤–µ—Ä—à—ë–Ω'")
            total_revenue = cur.fetchone()[0] or 0
            
            cur.execute("SELECT COUNT(*) FROM banned_users")
            banned_users = cur.fetchone()[0]
            
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {completed_orders}\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {unique_users}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_users}\n\n"
            f"üí∞ <b>–í—ã—Ä—É—á–∫–∞:</b>\n"
            f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ"
        )
        
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_admin_menu()
    )
    await callback.answer()


@router.callback_query(F.data.in_({"admin_users", "admin_items", "admin_orders", "admin_mass_send", "admin_export_import"}))
async def admin_coming_soon(callback: CallbackQuery):
    """Handle admin sections in development"""
    section_names = {
        "admin_users": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "admin_items": "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", 
        "admin_orders": "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏",
        "admin_mass_send": "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
        "admin_export_import": "üìÇ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç"
    }
    
    section_name = section_names.get(callback.data, "–†–∞–∑–¥–µ–ª")
    
    await callback.message.edit_text(
        f"{section_name}\n\nüöß –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!",
        parse_mode="HTML",
        reply_markup=get_admin_menu()
    )
    await callback.answer()