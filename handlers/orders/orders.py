from aiogram import Router, F
from aiogram.types import CallbackQuery
from utils.keyboards import get_requisites_kb
from database.models import DatabaseManager
from utils.helpers import generate_id
from utils.messages import format_order_message

router = Router(name="orders_main")

# Star prices mapping
STAR_PRICES = {
    "star_15": (15, 95),
    "star_25": (25, 155),
    "star_30": (30, 185),
    "star_45": (45, 275),
    "star_50": (50, 305),
    "star_100": (100, 599),
    "star_150": (150, 895),
    "star_300": (300, 1785),
    "star_500": (500, 2975),
    "star_750": (750, 4465),
    "star_1000": (1000, 5950)
}

# Premium prices mapping
PREMIUM_PRICES = {
    "prem_1m": ("1 –º–µ—Å—è—Ü —Å –∑–∞—Ö–æ–¥–æ–º", 199),
    "prem_3m": ("3 –º–µ—Å—è—Ü–∞ –±–µ–∑ –∑–∞—Ö–æ–¥–∞", 459),
    "prem_6m": ("6 –º–µ—Å—è—Ü–µ–≤ –±–µ–∑ –∑–∞—Ö–æ–¥–∞", 899),
    "prem_12m": ("12 –º–µ—Å—è—Ü–µ–≤ –±–µ–∑ –∑–∞—Ö–æ–¥–∞", 1699),
    "prem_12m2": ("12 –º–µ—Å—è—Ü–µ–≤ —Å –∑–∞—Ö–æ–¥–æ–º", 1999)
}


@router.callback_query(F.data.startswith("star_"))
async def handle_star_order(callback: CallbackQuery):
    """Handle star order callback"""
    if callback.data == "star_other":
        await callback.message.edit_text(
            "üí´ <b>–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥</b>\n\n"
            "üìù –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –ú—ã —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
            "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã",
            parse_mode="HTML",
            reply_markup=get_requisites_kb("stars")
        )
        await callback.answer()
        return
    
    if callback.data not in STAR_PRICES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return
    
    stars_count, price = STAR_PRICES[callback.data]
    
    # Create order
    db = DatabaseManager()
    order_id = generate_id("STAR")
    
    order_data = {
        'id': order_id,
        'user_id': callback.from_user.id,
        'item': f"{stars_count} Telegram Stars",
        'price': price,
        'status': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    }
    
    db.create_order(order_data)
    
    text = (
        f"‚≠ê <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω</b>\n\n"
        f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n"
        f"üåü <b>–¢–æ–≤–∞—Ä:</b> {stars_count} Telegram Stars\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n"
        f"üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã."
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_requisites_kb("stars")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("prem_"))
async def handle_premium_order(callback: CallbackQuery):
    """Handle premium order callback"""
    if callback.data not in PREMIUM_PRICES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return
    
    period, price = PREMIUM_PRICES[callback.data]
    
    # Create order
    db = DatabaseManager()
    order_id = generate_id("PREM")
    
    order_data = {
        'id': order_id,
        'user_id': callback.from_user.id,
        'item': f"Telegram Premium - {period}",
        'price': price,
        'status': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    }
    
    db.create_order(order_data)
    
    text = (
        f"üëë <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω</b>\n\n"
        f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n"
        f"üìÖ <b>–¢–æ–≤–∞—Ä:</b> Telegram Premium - {period}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n"
        f"üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã."
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_requisites_kb("premium")
    )
    await callback.answer()


@router.callback_query(F.data == "get_requisites")
async def get_requisites_callback(callback: CallbackQuery):
    """Handle get requisites callback"""
    requisites_text = (
        "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "üè¶ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
        "‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫: <code>1234 5678 9012 3456</code>\n"
        "‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: <code>2200 1234 5678 9012</code>\n"
        "‚Ä¢ –ÆMoney: <code>41001234567890</code>\n"
        "‚Ä¢ QIWI: <code>+79123456789</code>\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –¥–æ 24 —á–∞—Å–æ–≤\n\n"
        "‚ùì –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )
    
    await callback.message.edit_text(
        requisites_text,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "payment_sent")
async def payment_sent_callback(callback: CallbackQuery):
    """Handle payment sent callback"""
    await callback.message.edit_text(
        "‚úÖ <b>–ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç</b>\n\n"
        "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
        "‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤\n\n"
        "üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.\n"
        "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'.",
        parse_mode="HTML"
    )
    await callback.answer("–ü–ª–∞—Ç—ë–∂ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")