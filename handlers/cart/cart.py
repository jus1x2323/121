from aiogram import Router, F
from aiogram.types import CallbackQuery
from database.models import DatabaseManager
from utils.keyboards import get_cart_keyboard, get_metro_menu
from utils.messages import format_cart_message
from utils.helpers import generate_id

router = Router(name="cart_main")


@router.callback_query(F.data == "cart")
async def view_cart_callback(callback: CallbackQuery):
    """Handle view cart callback"""
    db = DatabaseManager()
    cart_items = db.get_user_cart(callback.from_user.id)
    
    if not cart_items:
        await callback.message.edit_text(
            "üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n\nüì≠ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\nüõç –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            parse_mode="HTML",
            reply_markup=get_metro_menu()
        )
        await callback.answer()
        return
    
    # Calculate total
    total_price = sum(item['price'] * item['quantity'] for item in cart_items)
    
    text = format_cart_message(cart_items, total_price)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_cart_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "view_cart")
async def view_cart_details_callback(callback: CallbackQuery):
    """Handle detailed cart view callback"""
    await view_cart_callback(callback)


@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: CallbackQuery):
    """Handle clear cart callback"""
    db = DatabaseManager()
    db.clear_user_cart(callback.from_user.id)
    
    await callback.message.edit_text(
        "üóë <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.",
        parse_mode="HTML",
        reply_markup=get_metro_menu()
    )
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")


@router.callback_query(F.data == "checkout_cart")  
async def checkout_cart_callback(callback: CallbackQuery):
    """Handle cart checkout callback"""
    db = DatabaseManager()
    cart_items = db.get_user_cart(callback.from_user.id)
    
    if not cart_items:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    # Calculate total
    total_price = sum(item['price'] * item['quantity'] for item in cart_items)
    
    # Create order
    order_id = generate_id("CART")
    
    # Prepare order item description
    items_text = ", ".join([f"{item['name']} x{item['quantity']}" for item in cart_items])
    
    order_data = {
        'id': order_id,
        'user_id': callback.from_user.id,
        'item': f"–ó–∞–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã: {items_text}",
        'price': total_price,
        'status': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    }
    
    db.create_order(order_data)
    
    # Clear cart after creating order
    db.clear_user_cart(callback.from_user.id)
    
    text = (
        f"üõí <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω</b>\n\n"
        f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n"
        f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
    )
    
    for item in cart_items:
        text += f"‚Ä¢ {item['name']} √ó {item['quantity']} = {item['price'] * item['quantity']} ‚ÇΩ\n"
    
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total_price} ‚ÇΩ\n\n"
    text += "üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞."
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML"
    )
    await callback.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")


@router.callback_query(F.data == "edit_cart")
async def edit_cart_callback(callback: CallbackQuery):
    """Handle edit cart callback"""
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã</b>\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∫–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
        parse_mode="HTML",
        reply_markup=get_cart_keyboard()
    )
    await callback.answer()