from aiogram import Router, F
from aiogram.types import CallbackQuery
from utils.keyboards import (
    get_main_menu, get_stars_menu, get_premium_menu, 
    get_metro_menu, get_sets_menu
)
from database.models import DatabaseManager

router = Router(name="user_menu")


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    """Handle main menu callback"""
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "stars")
async def stars_menu_callback(callback: CallbackQuery):
    """Handle stars menu callback"""
    db = DatabaseManager()
    section_status = db.get_section_status("stars")
    
    if not section_status['is_open']:
        await callback.answer(
            f"‚ùå –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç: {section_status['close_reason']}", 
            show_alert=True
        )
        return
    
    text = (
        "‚≠ê <b>Telegram Stars</b>\n\n"
        "üí´ Stars ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram –¥–ª—è:\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ —ç–º–æ–¥–∑–∏\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –±–æ—Ç–æ–≤\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_stars_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "premium")
async def premium_menu_callback(callback: CallbackQuery):
    """Handle premium menu callback"""
    db = DatabaseManager()
    section_status = db.get_section_status("premium")
    
    if not section_status['is_open']:
        await callback.answer(
            f"‚ùå –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç: {section_status['close_reason']}", 
            show_alert=True
        )
        return
    
    text = (
        "üëë <b>Telegram Premium</b>\n\n"
        "üåü –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º-—Ç–µ–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_premium_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "metro")
async def metro_menu_callback(callback: CallbackQuery):
    """Handle metro menu callback"""
    db = DatabaseManager()
    section_status = db.get_section_status("metro")
    
    if not section_status['is_open']:
        await callback.answer(
            f"‚ùå –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç: {section_status['close_reason']}", 
            show_alert=True
        )
        return
    
    text = (
        "üöá <b>METRO ROYALE</b>\n\n"
        "‚öîÔ∏è –õ—É—á—à–µ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –º–µ—Ç—Ä–æ:\n"
        "‚Ä¢ –û—Ä—É–∂–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤\n"
        "‚Ä¢ –ë—Ä–æ–Ω—è –∏ —à–ª–µ–º—ã 6 —É—Ä–æ–≤–Ω—è\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_metro_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "metro_sets")
async def metro_sets_callback(callback: CallbackQuery):
    """Handle metro sets menu callback"""
    db = DatabaseManager()
    section_status = db.get_section_status("metro_sets")
    
    if not section_status['is_open']:
        await callback.answer(
            f"‚ùå –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç: {section_status['close_reason']}", 
            show_alert=True
        )
        return
    
    text = (
        "üõ°Ô∏è <b>–°–µ—Ç—ã —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è</b>\n\n"
        "üéØ –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã –±—Ä–æ–Ω–∏ 6-–≥–æ —É—Ä–æ–≤–Ω—è:\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã –∏ —Ç–µ–ª–∞\n"
        "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—é–∫–∑–∞–∫–∞\n"
        "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ç:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_sets_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "tg_accounts")
async def tg_accounts_callback(callback: CallbackQuery):
    """Handle telegram accounts callback"""
    db = DatabaseManager()
    section_status = db.get_section_status("tg_accounts")
    
    if not section_status['is_open']:
        await callback.answer(
            f"‚ùå –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç: {section_status['close_reason']}", 
            show_alert=True
        )
        return
    
    # Get available accounts
    accounts = db.get_items_by_category('tg_accounts')
    
    if not accounts:
        await callback.message.edit_text(
            "üì± <b>Telegram –ê–∫–∫–∞—É–Ω—Ç—ã</b>\n\n‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    text = "üì± <b>Telegram –ê–∫–∫–∞—É–Ω—Ç—ã</b>\n\nüî• –ì–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
    
    for account in accounts[:10]:  # Show max 10 accounts
        if account['quantity'] > 0:
            text += f"‚Ä¢ <b>{account['name']}</b>\n"
            text += f"  üí∞ {account['price']} ‚ÇΩ\n"
            text += f"  üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {account['quantity']} —à—Ç.\n\n"
    
    text += "üí° –î–ª—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "nft")
async def nft_callback(callback: CallbackQuery):
    """Handle NFT callback"""
    db = DatabaseManager()
    section_status = db.get_section_status("nft")
    
    if not section_status['is_open']:
        await callback.answer(
            f"‚ùå –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç: {section_status['close_reason']}", 
            show_alert=True
        )
        return
    
    # Get available NFTs
    nfts = db.get_items_by_category('nft_items')
    
    if not nfts:
        await callback.message.edit_text(
            "üñº <b>NFT –ö–æ–ª–ª–µ–∫—Ü–∏–∏</b>\n\n‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç NFT –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    text = "üñº <b>NFT –ö–æ–ª–ª–µ–∫—Ü–∏–∏</b>\n\n‚ú® –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã:\n\n"
    
    for nft in nfts[:10]:  # Show max 10 NFTs
        if nft['quantity'] > 0:
            text += f"‚Ä¢ <b>{nft['name']}</b>\n"
            text += f"  üí∞ {nft['price']} ‚ÇΩ\n"
            text += f"  üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {nft['quantity']} —à—Ç.\n\n"
    
    text += "üí° –î–ª—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.in_({"support", "reviews", "other_services", "order_script", "description_design", "autospamming", "my_projects"}))
async def coming_soon_callback(callback: CallbackQuery):
    """Handle coming soon sections"""
    section_map = {
        "support": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "reviews": "‚≠ê –û—Ç–∑—ã–≤—ã", 
        "other_services": "üõ† –ü—Ä–æ—á–∏–µ –£—Å–ª—É–≥–∏",
        "order_script": "üßë‚Äçüíª –ó–∞–∫–∞–∑ –°–∫—Ä–∏–ø—Ç–∞",
        "description_design": "üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
        "autospamming": "ü§ñ AUTOSPAMMING –ë–æ—Ç",
        "my_projects": "üåü –ú–æ–∏ –ü—Ä–æ–µ–∫—Ç—ã"
    }
    
    section_name = section_map.get(callback.data, "–†–∞–∑–¥–µ–ª")
    
    await callback.message.edit_text(
        f"{section_name}\n\nüöß –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()